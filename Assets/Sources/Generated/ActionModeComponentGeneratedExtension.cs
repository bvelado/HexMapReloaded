//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public ActionModeComponent actionMode { get { return (ActionModeComponent)GetComponent(ParametersComponentIds.ActionMode); } }
        public bool hasActionMode { get { return HasComponent(ParametersComponentIds.ActionMode); } }

        public Entity AddActionMode(ActionMode newMode) {
            var component = CreateComponent<ActionModeComponent>(ParametersComponentIds.ActionMode);
            component.Mode = newMode;
            return AddComponent(ParametersComponentIds.ActionMode, component);
        }

        public Entity ReplaceActionMode(ActionMode newMode) {
            var component = CreateComponent<ActionModeComponent>(ParametersComponentIds.ActionMode);
            component.Mode = newMode;
            ReplaceComponent(ParametersComponentIds.ActionMode, component);
            return this;
        }

        public Entity RemoveActionMode() {
            return RemoveComponent(ParametersComponentIds.ActionMode);
        }
    }

    public partial class Pool {

        public Entity actionModeEntity { get { return GetGroup(ParametersMatcher.ActionMode).GetSingleEntity(); } }
        public ActionModeComponent actionMode { get { return actionModeEntity.actionMode; } }
        public bool hasActionMode { get { return actionModeEntity != null; } }

        public Entity SetActionMode(ActionMode newMode) {
            if(hasActionMode) {
                throw new EntitasException("Could not set actionMode!\n" + this + " already has an entity with ActionModeComponent!",
                    "You should check if the pool already has a actionModeEntity before setting it or use pool.ReplaceActionMode().");
            }
            var entity = CreateEntity();
            entity.AddActionMode(newMode);
            return entity;
        }

        public Entity ReplaceActionMode(ActionMode newMode) {
            var entity = actionModeEntity;
            if(entity == null) {
                entity = SetActionMode(newMode);
            } else {
                entity.ReplaceActionMode(newMode);
            }

            return entity;
        }

        public void RemoveActionMode() {
            DestroyEntity(actionModeEntity);
        }
    }
}

    public partial class ParametersMatcher {

        static IMatcher _matcherActionMode;

        public static IMatcher ActionMode {
            get {
                if(_matcherActionMode == null) {
                    var matcher = (Matcher)Matcher.AllOf(ParametersComponentIds.ActionMode);
                    matcher.componentNames = ParametersComponentIds.componentNames;
                    _matcherActionMode = matcher;
                }

                return _matcherActionMode;
            }
        }
    }
