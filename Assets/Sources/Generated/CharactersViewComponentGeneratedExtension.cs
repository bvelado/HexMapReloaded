//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public CharactersViewComponent charactersView { get { return (CharactersViewComponent)GetComponent(ViewComponentIds.CharactersView); } }
        public bool hasCharactersView { get { return HasComponent(ViewComponentIds.CharactersView); } }

        public Entity AddCharactersView(IdIndex newCharacterViewById) {
            var component = CreateComponent<CharactersViewComponent>(ViewComponentIds.CharactersView);
            component.CharacterViewById = newCharacterViewById;
            return AddComponent(ViewComponentIds.CharactersView, component);
        }

        public Entity ReplaceCharactersView(IdIndex newCharacterViewById) {
            var component = CreateComponent<CharactersViewComponent>(ViewComponentIds.CharactersView);
            component.CharacterViewById = newCharacterViewById;
            ReplaceComponent(ViewComponentIds.CharactersView, component);
            return this;
        }

        public Entity RemoveCharactersView() {
            return RemoveComponent(ViewComponentIds.CharactersView);
        }
    }

    public partial class Pool {

        public Entity charactersViewEntity { get { return GetGroup(ViewMatcher.CharactersView).GetSingleEntity(); } }
        public CharactersViewComponent charactersView { get { return charactersViewEntity.charactersView; } }
        public bool hasCharactersView { get { return charactersViewEntity != null; } }

        public Entity SetCharactersView(IdIndex newCharacterViewById) {
            if(hasCharactersView) {
                throw new EntitasException("Could not set charactersView!\n" + this + " already has an entity with CharactersViewComponent!",
                    "You should check if the pool already has a charactersViewEntity before setting it or use pool.ReplaceCharactersView().");
            }
            var entity = CreateEntity();
            entity.AddCharactersView(newCharacterViewById);
            return entity;
        }

        public Entity ReplaceCharactersView(IdIndex newCharacterViewById) {
            var entity = charactersViewEntity;
            if(entity == null) {
                entity = SetCharactersView(newCharacterViewById);
            } else {
                entity.ReplaceCharactersView(newCharacterViewById);
            }

            return entity;
        }

        public void RemoveCharactersView() {
            DestroyEntity(charactersViewEntity);
        }
    }
}

    public partial class ViewMatcher {

        static IMatcher _matcherCharactersView;

        public static IMatcher CharactersView {
            get {
                if(_matcherCharactersView == null) {
                    var matcher = (Matcher)Matcher.AllOf(ViewComponentIds.CharactersView);
                    matcher.componentNames = ViewComponentIds.componentNames;
                    _matcherCharactersView = matcher;
                }

                return _matcherCharactersView;
            }
        }
    }
