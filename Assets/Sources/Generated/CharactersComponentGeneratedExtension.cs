//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public CharactersComponent characters { get { return (CharactersComponent)GetComponent(CoreComponentIds.Characters); } }
        public bool hasCharacters { get { return HasComponent(CoreComponentIds.Characters); } }

        public Entity AddCharacters(PositionIndex newCharacters) {
            var component = CreateComponent<CharactersComponent>(CoreComponentIds.Characters);
            component.Characters = newCharacters;
            return AddComponent(CoreComponentIds.Characters, component);
        }

        public Entity ReplaceCharacters(PositionIndex newCharacters) {
            var component = CreateComponent<CharactersComponent>(CoreComponentIds.Characters);
            component.Characters = newCharacters;
            ReplaceComponent(CoreComponentIds.Characters, component);
            return this;
        }

        public Entity RemoveCharacters() {
            return RemoveComponent(CoreComponentIds.Characters);
        }
    }

    public partial class Pool {

        public Entity charactersEntity { get { return GetGroup(CoreMatcher.Characters).GetSingleEntity(); } }
        public CharactersComponent characters { get { return charactersEntity.characters; } }
        public bool hasCharacters { get { return charactersEntity != null; } }

        public Entity SetCharacters(PositionIndex newCharacters) {
            if(hasCharacters) {
                throw new EntitasException("Could not set characters!\n" + this + " already has an entity with CharactersComponent!",
                    "You should check if the pool already has a charactersEntity before setting it or use pool.ReplaceCharacters().");
            }
            var entity = CreateEntity();
            entity.AddCharacters(newCharacters);
            return entity;
        }

        public Entity ReplaceCharacters(PositionIndex newCharacters) {
            var entity = charactersEntity;
            if(entity == null) {
                entity = SetCharacters(newCharacters);
            } else {
                entity.ReplaceCharacters(newCharacters);
            }

            return entity;
        }

        public void RemoveCharacters() {
            DestroyEntity(charactersEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherCharacters;

        public static IMatcher Characters {
            get {
                if(_matcherCharacters == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Characters);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherCharacters = matcher;
                }

                return _matcherCharacters;
            }
        }
    }
