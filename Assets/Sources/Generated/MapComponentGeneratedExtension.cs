//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public MapComponent map { get { return (MapComponent)GetComponent(CoreComponentIds.Map); } }
        public bool hasMap { get { return HasComponent(CoreComponentIds.Map); } }

        public Entity AddMap(PositionIndex newMap) {
            var component = CreateComponent<MapComponent>(CoreComponentIds.Map);
            component.Map = newMap;
            return AddComponent(CoreComponentIds.Map, component);
        }

        public Entity ReplaceMap(PositionIndex newMap) {
            var component = CreateComponent<MapComponent>(CoreComponentIds.Map);
            component.Map = newMap;
            ReplaceComponent(CoreComponentIds.Map, component);
            return this;
        }

        public Entity RemoveMap() {
            return RemoveComponent(CoreComponentIds.Map);
        }
    }

    public partial class Pool {

        public Entity mapEntity { get { return GetGroup(CoreMatcher.Map).GetSingleEntity(); } }
        public MapComponent map { get { return mapEntity.map; } }
        public bool hasMap { get { return mapEntity != null; } }

        public Entity SetMap(PositionIndex newMap) {
            if(hasMap) {
                throw new EntitasException("Could not set map!\n" + this + " already has an entity with MapComponent!",
                    "You should check if the pool already has a mapEntity before setting it or use pool.ReplaceMap().");
            }
            var entity = CreateEntity();
            entity.AddMap(newMap);
            return entity;
        }

        public Entity ReplaceMap(PositionIndex newMap) {
            var entity = mapEntity;
            if(entity == null) {
                entity = SetMap(newMap);
            } else {
                entity.ReplaceMap(newMap);
            }

            return entity;
        }

        public void RemoveMap() {
            DestroyEntity(mapEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherMap;

        public static IMatcher Map {
            get {
                if(_matcherMap == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Map);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherMap = matcher;
                }

                return _matcherMap;
            }
        }
    }
