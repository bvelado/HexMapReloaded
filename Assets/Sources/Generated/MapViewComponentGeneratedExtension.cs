//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public MapViewComponent mapView { get { return (MapViewComponent)GetComponent(ViewComponentIds.MapView); } }
        public bool hasMapView { get { return HasComponent(ViewComponentIds.MapView); } }

        public Entity AddMapView(IdIndex newTileViewById) {
            var component = CreateComponent<MapViewComponent>(ViewComponentIds.MapView);
            component.TileViewById = newTileViewById;
            return AddComponent(ViewComponentIds.MapView, component);
        }

        public Entity ReplaceMapView(IdIndex newTileViewById) {
            var component = CreateComponent<MapViewComponent>(ViewComponentIds.MapView);
            component.TileViewById = newTileViewById;
            ReplaceComponent(ViewComponentIds.MapView, component);
            return this;
        }

        public Entity RemoveMapView() {
            return RemoveComponent(ViewComponentIds.MapView);
        }
    }

    public partial class Pool {

        public Entity mapViewEntity { get { return GetGroup(ViewMatcher.MapView).GetSingleEntity(); } }
        public MapViewComponent mapView { get { return mapViewEntity.mapView; } }
        public bool hasMapView { get { return mapViewEntity != null; } }

        public Entity SetMapView(IdIndex newTileViewById) {
            if(hasMapView) {
                throw new EntitasException("Could not set mapView!\n" + this + " already has an entity with MapViewComponent!",
                    "You should check if the pool already has a mapViewEntity before setting it or use pool.ReplaceMapView().");
            }
            var entity = CreateEntity();
            entity.AddMapView(newTileViewById);
            return entity;
        }

        public Entity ReplaceMapView(IdIndex newTileViewById) {
            var entity = mapViewEntity;
            if(entity == null) {
                entity = SetMapView(newTileViewById);
            } else {
                entity.ReplaceMapView(newTileViewById);
            }

            return entity;
        }

        public void RemoveMapView() {
            DestroyEntity(mapViewEntity);
        }
    }
}

    public partial class ViewMatcher {

        static IMatcher _matcherMapView;

        public static IMatcher MapView {
            get {
                if(_matcherMapView == null) {
                    var matcher = (Matcher)Matcher.AllOf(ViewComponentIds.MapView);
                    matcher.componentNames = ViewComponentIds.componentNames;
                    _matcherMapView = matcher;
                }

                return _matcherMapView;
            }
        }
    }
